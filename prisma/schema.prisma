// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          Int           @id @default(autoincrement())
  username    String        @unique
  password    String
  city_id     Int?          @unique
  address     String?
  bankAccount BankAccount[]
  City        City?         @relation(fields: [city_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Product {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  SKU              String           @unique
  description      String?
  slug             String           @unique
  keyword          String?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  discount         String?
  weight           Int              @default(100)
  category_id      Int
  sub_category_id  Int
  productDetails   ProductDetails[]
  productGalleries ProductGallery[]
  Category         Category         @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  SubCategory      SubCategory      @relation(fields: [sub_category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  reviews          Review[]
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  first_name String
  last_name  String
  email      String    @unique
  age        Int
  photo      String?
  password   String
  address    Address[]
  phone      String?
  edited_at  DateTime  @default(now())
  created_at DateTime  @default(now())
  cart       Cart?
  reviews    Review[]
  Order      Order[]
}

model Review {
  id          Int      @id @default(autoincrement())
  product_id  Int      @unique
  user_id     Int
  review_text String
  rating      Int
  image       String?
  edited_at   DateTime @default(now())
  created_at  DateTime @default(now())
  product     Product  @relation(fields: [product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Cart {
  id              Int           @id @default(autoincrement())
  user_id         Int           @unique
  shipping_cost   Int?
  total_payment   Int           @default(0)
  total_weight    Int           @default(0)
  total_price     Int           @default(0)
  courier         Courier?
  address_id      Int?
  bank_account_id Int?
  user            User          @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  address         Address?      @relation(fields: [address_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bankAccount     BankAccount?  @relation(fields: [bank_account_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  CartProduct     CartProduct[]
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String
  SubCategory SubCategory[]
  Product     Product[]
}

model BankAccount {
  id             Int      @id @default(autoincrement())
  account_holder String
  bank_name      BankName
  account_number String   @unique
  admin_id       Int?
  admin          Admin?   @relation(fields: [admin_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orders         Order[]
  carts          Cart[]
}

enum BankName {
  BSI
  BCA
  BNI
  BRI
  Mandiri
  Permata
  SeaBank
}

model Order {
  id              Int            @id @default(autoincrement())
  user_id         Int
  shipping_cost   Int
  total_price     Int
  total_payment   Int
  total_weight    Int
  order_date      DateTime
  payment_receipt String
  status          OrderStatus
  tracking_number String?
  address_id      Int
  bank_account_id Int
  courier         Courier
  user            User           @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  address         Address        @relation(fields: [address_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bankAccount     BankAccount    @relation(fields: [bank_account_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderProducts   OrderProduct[]
}

enum Courier {
  jne
  pos
  tiki
}

enum OrderStatus {
  waiting
  received
  rejected
  shipped
  complete
}

model OrderProduct {
  id                 Int            @id @default(autoincrement())
  product_details_id Int
  order_id           Int
  quantity           Int
  price              Int
  ProductDetails     ProductDetails @relation(fields: [product_details_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  order              Order          @relation(fields: [order_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model ProductDetails {
  id           Int            @id @default(autoincrement())
  product_id   Int
  color        String?
  size         String
  stock        Int
  price        Int
  product      Product        @relation(fields: [product_id], references: [id])
  CartProduct  CartProduct[]
  OrderProduct OrderProduct[]
}

model ProductGallery {
  id         Int     @id @default(autoincrement())
  photo      String
  product_id Int
  product    Product @relation(fields: [product_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model CartProduct {
  id                 Int            @id @default(autoincrement())
  product_details_id Int
  cart_id            Int
  quantity           Int
  price              Int
  ProductDetails     ProductDetails @relation(fields: [product_details_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cart               Cart           @relation(fields: [cart_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Address {
  id       Int     @id @default(autoincrement())
  street   String
  name     String
  city_id  Int
  zip_code Int
  user_id  Int
  user     User?   @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  city     City    @relation(fields: [city_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Cart     Cart[]
  Order    Order[]
}

model City {
  id        Int       @id @default(autoincrement())
  name      String
  addresses Address[]
  adminCity Admin[]
}

model SubCategory {
  id          Int       @id @default(autoincrement())
  name        String
  category_id Int
  Category    Category  @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Product     Product[]
}
